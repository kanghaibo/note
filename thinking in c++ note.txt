第八章 变量
1，常量const由c++引入c，但c中含义已经改变。
2，#define是文本替代，无类型检查。只在预处理期间存在，不占用存储空间。
3，c++中const默认为内部连接（internal linkage）。必须初始化，除非extern。如：extern const int bufsize;
4，通常c++编译器并不为const创建存储空间，而把它定义保持在编译器的符号表中。但extern强制进行了存储空间分配（另外取一个const的地址，也要进行存储空间分配），因为extern意味着使用外部连接，因此必须分配存储空间，也就是有几个不同的编译单元应当能够引用它。
5，没有办法让编译器确切知道内存的值是什么，要是知道的话，也就不必分配内存了。
6，大部分场合使用内部数据类型的情况，包括常量表达式，const，编译器都能执行常量折叠。
7，常量折叠（constant folding)，编译器在编译时可以通过必要的计算把一个复杂的常量表达式通过缩减简单化。？？？constant_folding.cpp
8，const用于集合时，不能在编译期间使用它的值，因为编译期间不知道存储的内容。因为编译器一般无法将一个集合保持在它的符号表中。这是const意味不能改变的一块存储空间。
C08：constag.cpp
const int i[] = {1,2,3,4};
//!float f[i[3]];//illegal
int main(){}
9，在一个数组定义里，编译器必须能产生这样的代码，它们移动栈指针来存储数组。
10，c编译器不能把const看成一个编译器期间的常量。
11，在c++中，一个const不必创建内存空间，而在c中，一个const总是需要创建一块内存空间。
12，extern const int x = 1;这样另一个文件就可引用x。声明extern const int x;。
13，8.2

thinking in c++ 2note
7.4基本序列容器：vector list deque
















