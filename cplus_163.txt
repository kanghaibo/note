一，第一个C++程序
1，#include 后面加文件名，后缀无所谓
2，using namespace 两个keyword。
3，c++ is c like。

#include <iostream>
using namespace std;
int main()
{
	cout << "hello world! i am " << 18 << "today!" << endl;
	return 0;
}
cout -- standard output, 左移

read input ，cin 右移,无需&，cin自己控制
#include <iostream>
using namespace std;
int main()
{
	int number;
	cout << "enter a decimal number:";
	cin >> number;
	cout << "ther number you entered is " << number << "."<<endl;
	return 0;
}

二，什么是对象？
object 对象
oriented 源于，源自于，导向
从对象出发考虑问题
object=entity 东西
东西可见或不可见
程序语言中对象就是变量。变量有类型，类型决定它能放什么。
从另一个角度看，对象=属性+服务。
data：the properties or status。
operations：the functions。
数据受保护，通过服务操作访问数据。

问题空间----解决空间 描述
c语言：过程写清楚，一步一步的步骤，用c语言表达式描述出来。
时间到，走进教室，打开投影仪。。。。
c++：定义一个教师，很多学生，一个投影仪，电脑，他们之间关系。
这样描述：这个场景有什么东西，东西之间关系。面向对象。
这样描述：事情发生的流程是怎么样，按照时间顺序它会一步步发生什么事情。面向过程。
区别：从时间顺序分析，从存在什么东西分析。

三维坐标点。
c：
typedef struct point3d{
	float x;
	float y;
	float z;	
}point3d;
void point3d_print(const point3d *pd);
point3d a;
a.x = 1; a.y = 2; a.z = 3;
point3d_print(&a);

c++:
class point3d{
public:
	point3d(float x, flaot y, float z);
	print();
private:
	float x;
	float y;
	float z;
};
point3d a(1,2,3);
a.print();
任何变量都是对象。

c vs c++
结构体中：数据，数据和操作
object-oriented，一种方法，a way to organize：
	组织设计designs（找出思路）和实现（代码写出来）。
设计和具体语言无关。
面向对象语言做实现，面向对象思想做设计。

对象，是设计和实现主要关注的东西。
而不是控制或者数据流，

关注东西，而不是操作。to focus on things，not operations。

三，面向对象的基本理念（原理）
对象和对象之间互相发送和接受消息的。
objects send and receive message（objects do things）。
对象和对象之间交换的形式是消息。
message are：
	composed by the sender.//组成被发送者
	interpreted by the receiver.//解释被接受者
	implemented by methods.//被方法实现
messages：
	may cause receiver to change state.
	may return results.

物以类聚 人以群分

objects 东西，实体   classes 东西的种类，概念
这个东西是对象。
object is a class。
class defines object。
类和类型是一样的。
类定义对象是什么样。
对象是类的一个东西。

oop smtalk
1，enerything is an object;
2，a program is bunch of objects telling each other what to do by sending message;
程序是一堆对象。这堆对象通过发送消息互相告诉别人做什么。
c语言是一堆的函数，其中有一个是main，从main出发，从运行时刻把这些函数串起来，某一时刻肯定在某个函数，这个函数可能会调用其他函数，回到mian函数结束。c是函数的集合。（全局变量）
3，each object has its own memory made up of other objects。
每一个对象有它自己的内存，这个内存里面是由其他对象组成的。
4，every object has a type。任何东西都是由某种类型定义出来的。
5，all objects of a particular type can receive the same messages。
一个特定类型的所有对象都是接受相同的消息。所有可以接受相同的消息的对象可以被认为是相同的类型。

对象---操作+数据
操作---接口
对象都是通过接口和外界打交道。

自然界中接口很容易观察到。具有什么样的接口的是什么东西。遵循某个接口，接口外面的东西可以换。
松散，接口，在程序中也可以拆换。耦合程度， 松， 紧。
接口：通信交流communication，保护protection
对程序而言：接口隐藏一些东西。隐藏实现。the hidden implementation。

封装：encapsulation 把数据和对这些数据所有的操作放在一起，数据隐藏起来，外界只能访问公开的那部分操作。


抽象：在某些层次上就不往下具体细分了，屏蔽了细节，只看某种层次的大局。


四，自动售票机例子
过程：走到机器前，放钱，打印车票，拿票走人
仿真对象：
price balance total
show prompt
print balance
insert money
print ticket

UML
ticketmachine
--------------
price
balance
total
--------------
show_prompt
get_money
print_ticket
show_balance
print_error

class ticket_machine{
public:
	void show_prompt();
	void get_money();
	void print_ticket();
	void show_balance();
	void print_error();
private:
	const int price;
	int balance;
	int total;
};

每一个类都应该有2个源代码文件，一个头文件.h，一个body文件.cpp。
在.cpp文件所要描述的类的实体是由.h声明，在.cpp中定义在.h中声明的那些东西的实体。

构造函数（无返回类型？）， 析构函数

:: 域解析符  resolver
这个函数在一个类中的函数。::前面没有类名是全局的函数
<class name>::<<function name>
::<function name> 

void s::f(){
	::f();//全局函数f
	::a++;//全局变量a
	a--;//s类中变量a
}

::表示我是在什么范围内的一个东西

五，头文件
定义一个类：
1，用分离的.h和.cpp文件来定义一个类。
2，类的声明declaration和类里面函数的原型放在.h
3，这些函数所以的body（definition）都要放在.cpp。

头文件：
1，函数声明在头文件里面，用到函数或定义函数的地方include。
2，类在头文件中声明，所以用到类或定义类里面实体的地方都要include


header = interface
1，你和你代码使用者之间的一个约定，做这个类的人告诉使用这个类的人，我这里面有一些什么样的东西，这些东西 你可以怎么样的去用。
2，编译器强化约定，要求你使用这些类，函数之前要声明。

c++程序
.h   declaration
.cpp  definition
任何一个类（.h .cpp）都应成对存在，.cpp include .h

#编译预处理指令
将.cpp文件读进去，找到里面#开头的指令，include它把你给的文件，整个文本放到.cpp，形成一个大的编译前用的文件。
include 文本的插入
g++ a.cpp --save-temps

duplicate 复制
c++ 编译器所有的名字都会加上下划线。
ld：链接器

解释语言vs编译语言
语言本身无编译/解释之分
常用的执行方式而已
解释型语言有特殊的计算能力
编译型语言有确定的运行性能



六，时钟的例子
clock display
c，写循环
c++，不关注过程，关注有什么东西

abstract 抽象
1，抽象：当你在看到一个事情时，有意的去看不见一些细节。看事情时，在某个层面上考虑问题，这种能力就是抽象。
2，

时钟分成2个部分，11 03，类功能有相同。


七，成员变量
本地变量（局部变量）
在函数内部定义，在函数内部存在有效，离开不存在无效。

本地变量，成员变量区别，作用域，存在地点不同。
就近原则

C++三种变量：
fields，parameters,local variables
成员变量（类的所有的函数之外，对象生存期一直存在，类的作用域）；
类中有成员变量，成员函数。
函数参数；
本地变量，就是局部变量。

类的定义是声明。
成员变量在每个类的对象里面。
类是虚的，不可能有变量。
成员函数属于类的。

#include <iostream>

class A{
	private:
		int i;
	public:
		void f(){};
};
strcut{
	int i;
}B;
void A::f()
{
	i = 20;
	cout << i << endl;
}
void f(struct B *p)
{
	p->i = 20;
	cout << p->i << endl;
}
int main()
{
	A a;
	B b;
	a.i = 10;
	cout << a.i;
	a.f();
	f(&b);
}

对象和成员变量联系建立的方式，this
void point::print();
void point::print(point *p);
point a;
a.print();
----
point::print(&a);
隐藏的。
可以打印this的地址。

this:pointer to the caller;
this is a natural local variable of all class;

九：构造与析构
对象创建的时候如何自动初始化所有成员变量的值，是保证对象运行正确的重要条件。构造函数能在对象创建的时候自动执行。当对象不再需要时，也同样需要自动执行的函数来保证资源的释放，那就是析构函数。

class point{
	public:
		void init(int x, int y);
		void print() const;
		void move(int dx, int dy);
	private:
		int x;
		int y;
};

point a;
a.init(1,2);
a.move(2,2);
a.print();

vc vs debug模式下会自己清理空间，0xcd，gb2312下2个字节烫。
构造函数帮你做清理。guaranteed;构造器或构造函数相同，翻译问题。
构造函数与类名相同，无放回类型，可以有参数。
class x{
	int i;
public:
	x();
}
类创建对象时被自动调用。
printf最好不要和cout混合用。

构造函数加参数：
Tree(int i){..};
Tree t(12);
think in  c++, C06:Constructor1.cpp;

析构函数：destructor，对象要被销毁掉之前是自动调用。
class Y{
	public:
	~Y();
};
对象被销毁之前调用。

十：对象初始化
对象在什么时候做初始化？本地变量对象的初始化顺序如何？什么是默认构造函数？如何做集合初始化？

存储：编译器在大括号开始的地方分配括号里面所有的变量的空间，构造函数的调用要在函数定义的地方才发生。
think in c++，Nojump.cpp

struct X{int i; float f;}
X x1 = {1,2.2,'c'};
X x2[] = {{1,2.2,'c'},{1,2.2,'d'}};
struct Y{float f; int i; Y(int a);};
Y y1[] = {Y(1), Y(2)};
Y y2[2] = {Y(1)};(error),错误看不懂的。
缺省（默认）构造函数，没有参数就是缺省构造；
编译器给你的是自动缺省构造函数。

十一：new & delete
动态申请对象
new：
	new int;
	new stash;//对象
	new int[10];
做2件事情，先分配空间，再new类时调用构造函数。（返回空间地址）
delete:
	delete p;
	delete[] p;
new的时候代[]，delete要带[]；
delete时析构函数先被调用。

int *psome = new int [10];
delete[] psome;

c++运行库，c++程序起来时操作系统会给一定的内存。
一张表，记录申请的内存地址和大小。

int *p = new int;
delete p;

int *a = new int[10];
a++; delete[] a;//运行错误，验证没有问题，查看

student *q = new student();
delete q;//q有类型，调用析构，释放。

student *r = new student[10];
delete r;//没有告诉r指向多个，只调用r指向的对象的析构，但空间都收回了，但析构函数只做了一个。可以试试。
delete[] r;
new 和delete顺序相反

不要用delete释放不是new出的东西。
不要两次delete。
delete[]， new[]
delete NULL;//对的

构造里面new的，在析构里面delete；

十二，访问限制
一个类的哪些成员可以被哪个范围的函数访问是OOP设计中重要的手段。C++提供了public、private和protected三种访问属性。本课时解释了前两种访问属性和友元的概念。

setting limits
类里面那些成员可以被别人访问，那些可以被自己访问。
oop，对象是封装起来的，对象是应该是被保护的，对象里面的数据应该不能被直接访问，别人能够使用函数做事情，函数对类中数据影响是自己决定。

使用类的程序员不能随心所欲的访问类里面的东西。
写类的程序员可以修改类内部的东西，而不至于会影响到使用者。

c++ access control
public 任何人
private 类的成员函数可以访问成员变量或成员函数
自己：类的成员函数，private可以是变量或函数。
private是对类来说的，同一类的对象之间可以互相访问私有成员变量。
class A{
	private:
		int i;
	public:
		A(){cout << "A::A()" << endl;}
		~A(){cout << "A:~A()" << endl;}
		void set(int i){this->i = i;}
		void g(A* q){cout << "A::g(),q->i" << q->i << endl;}
};
int main()
{
	A *p = new A[10];
	for(int i = 0; i < 10; i++)
		p[i].set(i);
	A b;
	b.set(100);
	p[0].g(&b);
	delete[] p;
	return 0;
}

private权限限制仅仅在编译时刻，只有编译器检查，运行时刻无所谓。
运行时刻可以访问别的类的私有的东西。
c++ 的oop特性只在源代码级别存在。编译完后就不是oop的东西，目标文件同c一样。

protected 类的自己以及子子孙孙可以访问。

friends 友元 破坏oop原则
你可以声明别人是你的朋友。朋友就可以访问你private的东西。
别人可以是别的类，别的函数（free 函数），别的类中的某个函数。

你说别人是你的朋友，不是说我是谁的朋友。

friend.cpp C05
struct X;//声明
struct Y{
	void f(X *);
}；
struct X{
	private:
		int i;
	public:
		void initialize();
		friend void g(X *, int);//global friend
		friend void Y::f(X *);//struct member friend
		friend struct Z;//entire struct is friend
		friend void h();
};

void X::initialize(){
	i = 0;
}
void g(X *x, int i){
	x->i = i;
}
。。。
某些运算符的重装要用到friend

一个类已经写好，没办法friend。
编译时刻检查friend

class VS struct
一样表达类，有个细微差别
没有写访问属性的，class缺省private，struct缺省public。

十三，初始化列表
构造函数是用来初始化对象中的成员变量的。但是当成员变量是对象时，需要用初始化列表来初始化它们。我们建议所有的成员变量都用初始化列表来做初始化。
initializer list
构造函数
A():p(0){}

class point{
	private:
		const float x, y;
		point(float xa = 0.0, float ya =0.0):y(ya),x(xa){}
};
可以初始化任何类型数据
这样和写到大括号里面有区别
比构造函数里面东西早执行。内置类型无所谓，但是对象就不同。

initialization va assignment

student::student(string s):name(s){}

student::student(string s){name = s;}
结果都一样
但是第一种叫初始化，第二种叫赋值。
第二种做了两件事情，初始化，赋值。
赋值之前做了初始化，因为没有明确给值，所以调用缺省构造函数。

可以举例子。

十四，对象组合
用别的类的对象来组合成自己的类的对象，是一种重要的代码重用的方式。本课时探讨其中的细节问题
oop，封装，继承，多态
继承是代码重用一种方式

composition：用已有的对象组成新的对象。

汽车有发动机和轮胎

对象制造对象，类的成员变量可以是另一个类的对象。

对象或引用

人，心脏在对象里面，书包发对象外面

什么东西在哪里就叫内存模型
对象可以通过对象本身，指针，引用访问
java 一种内存模型，引用。

class person{...};
class currency{...};
class saving_account{
public:
	saveing_account(const char *name, const char *address, int cents);
	~saveing_account();
	void print();
private:
	person m_saver;
	currency m_blance;	
};

saveing_account::saveing_account(const char *name, const char *address, int cents):m_saver(name,address),m_blance(0,cents){}
void saveing_account::print(){
	m_saver.print();
	m_balance.print();
}

初始化列表应该初始化所以成员变量

十五，继承
继承和组合不同，但都是软件重用
已有的对象拼装对象（类），组合
拿已有的类来，在类的基础上做点改造，得到一个新的类，继承

区别，对象，类。实体，概念。

inheritance，继承的东西
成员变量
成员函数
接口（public成员函数，成员变量）

一个类定义一个新类
基类 超类 父类
派生类 子类 

#include <iostream>
using namespace std;
class A{
public:
	A()::i(0){cout << "A::A()"<<endl;}
	～A{};
	void print(){};
protected:
	void set(int i){this->i = i;}
private:
	int i;
};
class B:public A{
	public:
		void f(){
		set(20);
		//i=30;
		print();}	
};
int main()
{
	B b;
	//b.set(10);
	b.print();
	b.f();
	return 0;
}

private子类也不能用，protected子类能用但别人不能操作。

十六，子类父类关系
重载
class A{
public:
	A(int ii):i(ii) {}
	~A(){}
private:
	int i;
};
class B:public A{

};

int main()
{
	B b;
}
继承父类，子类就有父类所有的东西。初始化子类，那子类内部父类部分要被初始化。B b，先调用A的 A(),发现没有，调用B自动缺省构造函数，先析构B，A后。
可以在B中加：
B():A(15){};

初始化列表按声明的顺序，那父类最先，然后成员变量。

class A{
public:
	A(int ii):i(ii) {}
	~A(){}
	void print(){}
	void print(int i){}
private:
	int i;
};
class B:public A{
	B():A(15){}
	~B(){}
	void print(){}
};

int main()
{
	B b;
}
名字隐藏，当子类和父类当中出现了同名，父类中有重载函数，子类当中出现了和父类相同的函数，那子类只有那一个函数了，只有子类自己的，父类的那些同名函数被隐藏了。

并且此时子类和父类同名函数没关系。

这两点只有C++是这样。
为什么这样：因为关系，所以上面都应该没关系。
重写

十七，函数重载和默认参数
 本课时解释函数重载和函数参数表的默认参数。重载表示同名但是不同参数表的函数可以同时存在，当调用的时候按照所给参数来选择。参数表最后一个或几个参数可以具有默认值。默认值必须在调用的地方可见。

函数名同，参数表同，返回类型不同，不能构成重载。

leftover.cpp:
void print(char *str,int width);
void print(double d,int width);
void print(long l,int width);
void print(int i,int width);
void print(char *str);

print("pancakes", 15);
print("sysup");
print(1990.0,10);
print(1999,12);
print(1999L,15);

overload.cpp  auto case
void f(short i);
void f(double d);
f('a');
f(2);
f(2L);
f(3.2);

缺省参数
stash（int size, int initquantity = 0);
statsh(10);
statsh(10, 2);

缺省参数应该从最右边写过来。
缺省值应该写在.h中，在cpp定义中不能这么写。
（其实就是声明能写，定义不能）
编译时刻的事情，
a.cpp
#include "a.h"
#include <iostream>
void f（int i, int j){
	cout << i << " " << endl;
}
a.h
void f(int i, int j = 0);
main.cpp
#include <iostream>
void f(int i, int j = 10);
int main()
{
	f(10);
	return 0;
}
10 10;
不要使用缺省构造函数，少打字的事情一般都不好。

十八，内联函数
函数调用有额外开销。

int f(int i)
{
	return i*2;
}
int main(void)
{
	int a = 4;
	int b = f(a);
}

函数参数，函数地址。
返回值，pop。

inline
函数代码嵌到哪里去，但保持函数独立性（在code区动力）。

inline int f(int i)
{
	return i*2;
}
int main(void)
{
	int a = 4;
	int b = f(a);
}


int main()
{
	int a = 4;
	int b = a*2;
}
类型检查是编译器做的，对运行无影响。

最终可执行文件没有inline函数。
.cpp,.h都必须重复说inline
inline int plushone(int x);
inline int plushone{return ++x;}
声明inline，实现无inline，还是会调用。

编译器一个时刻只能看到一个.cpp
内联函数应将实现放到.h文件，如果在.cpp，在另一个.cpp使用这个内联函数就会出问题。
例子：
a.h
inline void f(int i, int j);
a.cpp
#include "a.h"
#include <iostream>
inline void f(int i, int j)
{
	cout << i << " " << j << endl;
}

main.cpp
#include "a.h"
int main()
{
	f(10,10);
	return 0;
}
ld出错，f不存在，main试图调用f函数，main.cpp不知道f的实现。a.cpp看到f是inline又不产生函数代码，应该将f的实现放到.h中。
悬崖边竖个牌子warning，程序员都会掉下去的

inline函数的定义是个声明。
程序变长，省去调用函数开销，空间换时间。
比c的宏要好，宏不做类型检查，inline要安全。

inline可能不是inline，函数过于巨大，编译器就会不作出inline。比如递归，复杂循环。

成员函数class声明时给出函数的实现，那这些函数都是inline。inline.cpp think-in-c++

get,set函数，做成inline
class cup{
	int color;
public:
	int getColor(){return color;};
	void setColor(int color){
		this->color = color;
	}
};

在.h中，在class外面定义函数为inline。think in c++

小函数会自动inline
2，3函数，小函数经常被调用。
递归，超过20行不会。

十九：const
const对c++是变量，不是常数。
编译器而言，变量要分配地址，常数编译器编译过程中记在内存表的一个值。

编译器时刻知道值的const的。
const int bufsize = 1024;
extern const int bufsize;//和bufsize是不是const没关系。
const在运行时刻不保证，只是编译时刻保证。
const int size = 12;
int a[size];//ok

int x;
cin >> x;
const int size = x;
double s[size];//error
编译器需要知道刚进入函数时知道所有局部变量的大小，才能在栈中分配大小。


int *p;
const int *cip;
//
int i;
ip = &i;
cip = &i;
//
const int ci = 3;
ip = &ci;//error
cip = &ci;


char *s = "hello world";

#include <iostream>
using namespace std;
int main()
{
	char *s = "hello world";
	cout << s << endl;
	s[0] = 'B';
	cout << s << endl;
	return 0;
}

stop record

char *s = "hello world";//这个做法过时了
"hello world"代码段
程序运行起来，从操作系统得到一块独立的虚拟内存（从0开始），mmu翻译成物理物理，mmu内存保护。

char *s = "hello world";//编译器报警告，只是编译器不知道你后面会不会修改s指向的地方。
s[0] = 'B';//编译器不知道s指向一个不能那个改的地方
改成const char *s = "hello world";


char s[] = "hello world";//做了拷贝

void f(const int *x);//保证对x指向的对象不能修改
int a = 15;
f(&a);
const int b = a;
f(&b);
b = a+1;//eroor

void fun(const int i)
{
	i++;//error,comile-time error
}
///
int f3(){return 1;}
const int f4(){return 1;}
int main()
{
	const int j = f3();//ok
	int k = f4();//but this works fine too
	//值当然可以
}

传进传出地址的话，ConstPointer.cpp
const Currentcy this_raise(42,38);
整个对象是const，对象的值不能被修改，对象的函数就有问题了。编译器没法检查。

screen marker

//const，保证不修改类的成员变量
int Date::set_day(int d)
{
	day = d;//ok,non-const so can modify
}
int Date::get_day() const
{
	day++;//error modifies data member
	set_day(12);//error calls non-const member
	return day;//ok
}
声明和定义的地方要重复
int get_day() const;
int get_day() const{return day;}
const的意思是this是const的。

二十，不可修改的对象
整个对象const的用法。
#include <iostream>
using namespace std;
class A{
	int i;
public:
	A():i(0){}
	void f(){cout << "f()" << endl;}
	void f()const{cout << "f() const" <<　endl;}
};

int main()
{
	const A a;
	a.f();
	return 0;
}
//f() const
overload:参数表不同 因为this也属参数表

改
#include <iostream>
using namespace std;
class A{
	int i;
public:
	A(){}
	void f(){cout << "f()" << endl;}
	void f()const{cout << "f() const" <<　endl;}
};

int main()
{
	A a;//有const，构造必须初始化，因为const对象以后没办法修改a
	a.f();
	return 0;
}

改
#include <iostream>
using namespace std;
class A{
	const int i;
public:
	A():i(0){}//必须
	void f(){cout << "f()" << endl;}
	void f()const{cout << "f() const" <<　endl;}
};

int main()
{
	A a;
	a.f();
	return 0;
}


//
class HasArray{
	const int size;
	int array[size];//error
	...
};
有个成员变量const，不能做数组size，可以加static。或用枚举

1，static const int size = 100；
2，class HasArray{
	enum{size = 100};
	int array[size];//ok
};

二十一，引用
引用是C++的一种掌握对象的方式，它通过给一个变量施加一个别名的方式来访问那个变量。本课时解释了引用的语法和实现细节。

references：引用
c++,内存模型，对象地方：堆栈，堆，数据区；
访问对象方式：变量，指针，引用

char c;//c是一个变量，里面放字符
char *p = &c;//p是指针，*p是一个char
char &r = c;//r是一个引用，r是c的引用，c是左值。
初始化和赋值不同。引用定义时应该初始化，除了下2中情况。
alias别名 引用
一个东西的2个名字
type &refname = name;

1，参数表，2，成员变量。不需要给初始值。
type &refname;
绑定

int x = 47;
int &y = x;//y is a reference to y;
cout << "y = " << y;
y = 18;
cout << "x = " << x;
y是x的另一个名字，可以随意替换。
初始化y时是y与x指定的那块内存绑定。

引用初始化建立了一种绑定关系，定义时必须初始化；
int x = 3;
int &y = x;
const int &z = x;//通过z不能修改x，x可变。

void f(int &x);
f(y);//初始化x在函数调用时。

rules：
绑定运行时刻不能变。
void fun(int &);
fun(i*3);//i*3有结果，但没有一个有名字的变量来放他的结果。
引用初始化，赋值给引用的东西必须有一个位置（左值）。

//think in c++ simple c++ reference
int *f(int *x){
	(*x)++;
	return x;//safe,x is outside this scope
}

int &g(int &x){
	x++;
	return x;
}

int x;
int &h(){
	int q;
	//return q; //error
	return x;//
}

int main()
{
	int a = 0;
	f(&a);//ugly(but explicit)
	g(a);//clean(buf hidden)
	h() = 16;
	//*k() = 10;
}

引用 指针
引用是const指针
1，引用不能是null，指针可以
2，引用基于一个存储在变量，给它起别名，指针不用基于已经存在的变量。
3，引用不能改变，指针可以改

java内存模型，对象在堆，访问对象都是指针（*取消了，不能做计算），在java称为引用。
引用不能做引用之间赋值

int x;
int &a = x;
int &b = a;//error 引用的引用是错误的。
int &b = x;//ok
b = a;//什么也没做

1，没有引用的引用
2，没有引用的地址
int & *p;//error
void f(int *&p);//ok
3，没有数组的引用（引用不是一个实体）

二十二，向上造型
把子类的对象交给父类的指针或引用就成了向上造型。本课时研究了对象内的数据结构，并解释了向上造型。造型并不是类型转换。
upcasting examples

D is derived from B (D类有B类派生来)
D => B
D* => B*
D& => B&


B = D,为什么可以？
对象内部结构，一个子类对象具有父类对象所以的东西，子类继承了父类，父类public东西子类也有。把子类对象当父类对象来用，调用父类public的函数都能接受，所以子类的东西可以赋值交给父类。多出的东西忽略。学生是个人，不把你当学生看，把你当人看。

#include <iostream>
using namespace std;
class A{
public:
	int i;
	A():i(10){}
};
class B:public A{
private:
	int j;
public:
	B():j(30){}
	void f(){cout << "B.j=" << j << endl;}
};
int main()
{
	A a;
	B b;
	cout << a.i << " " << b.i << endl;
	cout << sizeof(a) << " " << sizeof(b) << endl;

	int *p = (int *) &a;
	cout << p << " " << *p << endl;
	*p = 20;
	cout << a.i << endl;
	p = (int *)&b;
	cout << p << " " << *p << endl;
	p++;
	*p = 50;
	b.f();
	//const也可以，指针可以为所欲为
	return 0;
}

子类对象当父类对象来看，upcast。（没有类型转换）
double cast int，丧失了double一些数据，upcast数据没有丢。

Manager pete("pete", "12345", "bakery");
Employee *ep = &pete;//upcast
Employee &er = pete;//upcast

lose type information about the object:
ep->print(cout);//print base class version

二十三，多态性
“你是一个Shape，所以你会render，那么，请render你自己吧”。当通过一个父类的指针或引用调用它父类具有的函数时，实际会调用所指的对象的类型的函数，这就是多态性。

画图程序：
circle rectangle ellipse

operations:
render
move
resize
data:
center

以一个类型定义另外一个类型。
class xypos{...};
class shape{
public:
	shape();
	virtual ~shape();
	virtual void render();//子类重写了render，名称，参数表相同，那子类和父类同名的函数才有联系
	void move(const xypos&);
	virtual void resize();
protected:
	xypos center;
};

class ellipse:pbulic shape{
public:
	ellipse(float maj, float minr);
	virtual void render();//will define own ,virtual可加可不加，父类virtual，子子孙孙都是virtual
protected:
	float major_axis, minor_axis;
};

class circle:public ellipse{
public:
	circle(float radius):ellipse(radius,radius){}
	virtual void render();
};

void render(shape *p){
	p->render();
}

void fun(){
	ellipse ell(10,20);
	ell.render();//ellipse
	circle circ(40);
	circ.render();//circle
	render(&ell);//upcast ellipse
	render(&circ);//upcast circle
}
vitual 告诉编译，对这个函数的调用，如果是通过指针或引用的话，要到运行期间确定是什么类型，这个指针或引用指向什么对象，调用这个对象的函数。

polymorphism 多态性
render函数中p是多态的。

多态性建立2个基础上
upcast
动态绑定 dynamic binding
	静态绑定：调用的函数是确定的，编译时确定的
	动态绑定：运行时确定调用哪个函数

p有一个静态类型shape *,还有动态类型 (运行确定)，如果函数是virtual就使用动态类型，函数不是virtual使用静态类型shape *;

二十四，多态的实现
任何一个类型有虚函数，这个类的对象就比正常的大一点；

#include <iostream>
using namespace std;
clas A{
public:
	A():i(20){}
	virtual void f(){cout << "A::fun()" << i << endl;}
	int i;
};
int main()
{
	A a;
	a.f();
	cout << sizeof(a) << endl;
	int *p = (int *)&a;
	//p++;
	cout << *p << endl;
	return 0;
}

vptr:
所有有虚函数的类的对象，最头上自动加上一个隐藏的指针，这个指针指向一个表，这个表叫vtable。vtable里面是类所有virtual函数的地址，vtable是类的，不是对象的。这个类的所有对象的vptr是一样。
#include <iostream>
using namespace std;
clas A{
public:
	A():i(20){}
	virtual void f(){cout << "A::fun()" << i << i << endl;}
	int i;
};
class B:public A{
	public:
		B():j(20){];}
		virtual void f(){cout << "B::f()" << j << endl;}
		int j;
};
int main()
{
	A a;
	B b;
	A *p = &b;
	p->f();//b的f
	a = b;
	a.f();//a的f
	p = &a;
	p->f();//a的f

	int *r = (int *)&a;
	int *t = (int *)&b;
	*r = *t;
	p->f();//b的f，但j不存在
	return 0;
}
//赋值操作时vptr没有变

子类vtable和父类的vtable结构是一样的（顺序一致），没有重写就是用父类的。
ellipse elly(20f,40f);
circle circ(60f);
elly=circ;// 10 in 5?

#include <iostream>
using namespace std;
clas A{
public:
	A():i(20){}
	virtual void f(){cout << "A::fun()" << i << endl;}
	int i;
};
int main()
{
	A a,b;
	a.f();
	cout << sizeof(a) << endl;
	int *p = (int *)&a;
	int *q = (int *)&b;
	//p++;
	cout << *p << endl;
	cout << *q << endl;
	int *x = (int *)*p;
	cout << x << endl;
	return 0;
}

。。。
void func(ellipse &elly)
{
	elly.render();
}
circle circ(60f);
func(circ);
//引用就是指针，所以一样的

shape *p = new ellipse(100f,200f);
...
delete p;
析构是virtual的原因。
类里面有一个virtual函数，那么析构应该是virtual的。

所有的oop语言默认是virtual，c++默认不是。默认静态绑定，效率问题。

ovreriding：
如果父类和子类的两个函数是virtual的，名称，参数表相同，构成overrideing关系，重写，覆盖。
class base{
	public:
		virtual void func();
};
class derived:public base{
	public:
		virtual void func();
		//overrides base::func();
};

在重写函数里调用父类的函数
void derived::func(){
	cout << "" << endl;
	base::func();//call to base
}

。。
D从B继承而来
D::f()返回B的f函数返回类型的子类。

class expr{
	public:
		virtual expr* newexpr();
		virtual expr& clone();
		virtual expr self();
};
class binaryexpr:public expr{
	public:
	virtual binaryexpr *newexpr();
	virtual binaryexpr &clone();
	virtual binaryexpr self();//error
	//不是upcast关系
}

overloading and virtuals
class base{
	public:
		virtual void func();
		virtual void func(int);
};
情况同无virtual一样。namehidding，只有c++存在。

二十五，引用再研究
本课时解释引用作为类的成员、引用作为函数参数和返回时的问题。

一个类的成员是引用，当你声明它是没办法给他一个初始值。
如果引用是全局或局部，需初始化。是函数参数或成员变量，无法初始化。

class x{
	public:
	int &m_y;
	x(int &a)；
}；
x::x(int &a) :m_y(a){}
//在{}m_y=aa;这是赋值

函数返回一个引用（同指针）

#include <assert.h>
const int size = 30;
double myarr[size];
double &subscript(const int i)
{
	return myarr[i];
}
int main()
{
	for(int i = 0; i < size; i++)
		myarr[i] = i*0.5;
	//引用变成值
	double value = subscript(12);
	//引用
	subscripte(3) = 34.5;
}

。。。。
person(const string &name, int weight);

void func(const int &y, int &z)
{
	z = z*5;//ok
	y += 8;//error
}

void func(int &);
func(i*3);//error
产生一个临时变量（const int)
void f(const int &i)
{
	cout << i << endl;
}
int main()
{
	int i=3;
	f(i*3);
	return 0;
}
返回类型有const
class A{
public:
	int i;
	A():i(0){}
};
A f()//const A f() 返回的对象不能修改
{
	A a;
	return a;
}
int g()
{
	int i = 10;
	return i;
}
int main()
{
	f().i = 10;//f()函数返回对象
	g() = 10;//error
	A b;
	f() = b;//f()返回的对象不知道在那
	return 0;
}

二十六，拷贝构造1
当需要用同类的一个对象来创建一个新的对象的时候，那个类的拷贝构造函数就会被调用来构造这个新的对象。本课时解释拷贝构造函数的用法。

void func(currency p)
{
	cout << "x =" << p.dollars();
}
...
currency bucks(100,0);
fun(bucks);//bucks 和p没有关系
两种可能性
currency p = bucks;
p = bucks;
//定义 声明
//赋值 初始化

c11:howmany.cpp thinking int c++
有的构造绕过了构造函数
howmany h2 =h;//没有经过构造函数
howmany h2(10) 和howmany h2 = 10相同。
初始化可以还有一个地方

拷贝构造：有一个构造函数，构造函数的参数是自己类const引用，用另外一个自己类对象初始化时会被调用。没有给，c++自己给。
T::T(const T&);
默认拷贝每一个成员变量。成员变量对成员变量的拷贝，如果成员是其他类对象，递归调用其他类拷贝构造函数。成员有指针，指针的拷贝，引用的拷贝。

如果拷贝构造函数是自己类对象，传进去的参数要发生一个拷贝构造，如果这样，递归，出不来。

如果是引用，不需要调用拷贝构造。

二十七，拷贝构造II
class person{
	public:
	person(const char *s);
	~person();
	void print();
	//private:
	char *name;
};
没有写拷贝构造，编译器自动给，新的对象的指针和老的对象指针指向同一个东西。
person.cpp
person::person(const char *s)
{
	name = new char[::strlen(s)+1];
	::strcpy(name,s);
}
person ~persone()
{
	delete[] name;
}
main.cpp
int main()
{
	person p1("john");
	person p2(p1);
	printf("p1.name=%p\n",p1.name);
	printf("p2.name=%p\n",p2.name);
	//free两次
}
在c++,cstring 有点不同，const，size_t
persone::person(const person &w)
{
	name = new char[::strlen(w.name)+1];
	::strcpy(name,w.name);
}
private是对类的，不是对对象，访问另外一个同类的对象的private的东西ok。？？

person p1 = p2;//call
person p1(p2);//call
拷贝构造调用的地方：
1，调用函数，函数的参数是对象本身。
void roster(person);
person chile("ruby");
roster(child);//call
2，
person captain()
{
	person player("georag");
	return player;
}

person who("");//call 几次


main.cpp
person f()
{
	person p1;
	return p1;
}
int main()
{
	person p = f();
	/*person @tmp = f();
	person p = @tmp;*/
	//person p = ip;
	//两种可能
	return 0;
}

编译器可能会把它认为不必要的拷贝优化掉

person copy_func(char *who)
{
	person local(who);
	local.print();
	return local;//copy ctor called
}
person nocopy_func(char *who)
{
	return person(who);
	//大多数编译会优化掉拷贝构造
}//no copy needed

初始化，任何对象只能初始化一次

class person{
public:
	person(const string&);
	~person();
	void print();
private:
	string name;
}
//不需要拷贝构造函数
因为string类有拷贝构造函数，但指针没有

你写类就为这个类写拷贝构造
一个类（暂时）：
构造函数
virtual析构函数
拷贝构造函数

不希望被拷贝，声明私有的拷贝构造函数，就没法拷贝对象，函数参数不能是对象本身。

java没有拷贝构造函数，java对象都是指针来操作的。

二十八，静态对象
如果一个对象是静态的，它的构造时机就很有讲究。本课时解释静态对象的空间分配和构造的问题。

static有两种完全不同的含义。
c++更复杂，static的成员变量，成员函数
static成员变量----在所有对象之间共享
static成员函数----在所有对象之间共享，只能访问静态成员变量和静态成员函数
class x{
	x(int,int);
	~x();
}
void f()
{
	static x my_x(10,20);
	//存储是全局，初始化是局部的
	//第一次进这个函数初始化
	//c++的一起都可以变成c
	//链接的时候分配的空间
	//伴随一个隐藏的标识已经被初始化
}
java保存任何对象都是初始化后才能被得到

全局变量的析构是程序结束的时候发生。
静态存储区是链接时分配空间
全局变量的构造执行是mian函数之前。

main （） exits
exit（）is called

多个文件中多个全局变量那个先初始化编译器来定
全局变量之间初始化之间有依赖，跨文件的构造无依据。不要这么干，或放一起。
java没有全局变量

二十九，静态成员
如果一个类有静态的成员变量，那么它实际上还是全局变量，只是访问是受限于类。另外，类也可以有静态的成员函数。本课时解释静态成员的细节。

对象和对象之间相同是静态的。
static成员，是类的，不是对象的。
静态成员变量，在所有对象存在且值一致。
class A{
public:
	A(){i = 0;}
	//A():i(0){}; error,A::i是静态成员，只能在定义的地方做初始化，初始化列表只能初始化非静态
	void print(){cout << i <<　endl;}
	void set(int ii){ i = ii;}
	//void set(int i){this->i = i;}
	//i还是类的成员变量 ok
	static void say(int ii){ cout << ii << i << endl;}
	//函数是全局，不跟对象走，但访问属性变了
	//static void say(int ii){ cout << ii << k << endl;} error
	//static void say(int ii){ cout << ii << this->i << endl;} error
private:
	int k;
	static int i;//int i;
	//如果这个i是public
	// cout << a.i << endl; ok ,private error
	// cout << A::i << endl; ok,private error
};
int main()
{
	A a,b;
	a.set(10);
	b.print();

	a.say(0);
	A::say(0);
	return 0;
}
类里面东西都是声明，而不是定义
所以在某个.cpp中要定义int A::i;
改成static int i;是错误的，和类的静态成员访问属性违背。类的静态成员可能在外部被访问。
可以int A::i = 20;//
inline的body可以放在.h

如果有静态成员变量，一定要有对应的.cpp定义静态成员。


三十，运算符重载-基本规则
当一个运算符要对某个类的对象做操作时，可以根据所操作的类型执行不同的重载函数。本课时解释运算符重载的基本规则。
overloading operators
在c++里几乎可以重载所有运算符。
重载运算符，写函数改变运算符的行为，当这些运算符要对你定义的类的对象去做运算，不使用默认的运算功能，而使用你的运算功能。

能：
+ = * / % ^ & | ~
= < > += -= *= /= %=
^= &= != << >> >>= <<= ==
!= <= >= ! && || ++ --
, ->* -> () []
new delete
new[] delete[]

不能：
. .* :: ?:
sizeof typeid(给出类型的ID)
static_cast dynamic_cast const_cast
reinterpret_cast

1，只有已经可以存在的能被重载
2，只能对一个类或枚举类型做重载运算符
3，重载运算符必须保持原有操作数的个数
4，优先级不能改

operator *(...)

可以作为成员函数：
const String String::operator +(const String &that)
可以作为一个全局函数：
const String operator+(const String &r,const String &l)

how to overload
1,作为成员函数
	this是第一个参数，不会在receiver上做类型转换（receiver决定了操作符用那个的），必须有类的访问权限
//x+3 double 测试
class Integer{
public:
	Integer(int n = 0):i(n){}
	const Integer operator+(const Integer &n) const{
		return Integer(i+n.i);
	}///const a+b=6 error
	const Integer operator-() const{
		return Integer(-i);
	}// z = -x;//z.operator=(x.operator-());制作了一个新的对象给z
private:
	int i;
}
Integer x(1), y(5), z;
x+y;======= x.operator+(y);
运算符左边那个叫receiver,决定+用那个+
z = x+y;//ok receiver x
z = x+3;//ok receiver 3转换为Integer
z = 3+y;//编译器从左向右扫描，3 receiver,不做类型转，需要一个函数将Integer转换为int，没有所以编译错误

2，作为全局函数
	多一个参数，类型转换在2个操作数都可以，能被作为友元

class Integer{
	friend const Integer operator+(const Integer &lhs, const Integer& rhs);
};
const Integer operator+(const Integer &lhs, const Integer& rhs)
{
	return Integer(lhs.i+rhs.i);
}
Integer x, y;
x+y; // operator+(x,y);
z = x+y;
z = x+3;
z = 3+y;//ok 整数+没法做，所以选择Integer的+
z = 3+7;//error，3+7 结果然后转换Integer


选择：tips
1，单目应该做成成员的
2，= () [] -> ->*必须是成员的
3，赋值应该是成员的
4，所有其他的二元做出非成员的。

三十一，运算符重载---原型
本课时解释运算符重载时，各种运算符的基本原型
参数
1，传进去的一定是对象引用
2，运算符会不会修改算子，不会const，会的不const ++ -- 赋值
3，全局也一样
返回
1，决定返回是对自己修改还是制造新的对象
2，新的对象能否被赋值
	+ a+b = 6,//const，不能做左值
	赋值//引用，可以做左值
	[],//引用，可以做左值


+ - * /%^ & | ~
const T operatorX(const T&l, const T&r)const;

! && || < <= == >= >
bool operatorX(const T&l, const T&r)const;

[]
T&T::operator[](int index);

++ --
class Integer{}
const Integer & operator++();//prefix ++
const Integer operator++(int);//postfix ++
const Integer &operator--();//perfix --
const Integer operator--(int);//postfix --
}
const Integer &Integer::operator++(){
	*this += 1;//increment
	return *this;//fetch
}
const Integer Integer::operator++(int){
	Integer old(*this);//fetch
	++(*this);//increment
	return old;//return
}

Integer x(5);
++x;//call x.operator++();
x++;//call x.operator++(0);

关系运算：
class Integer {
	bool operator==(const Integer& rhs)const;
	bool operator!=(const Integer& rhs) const;
	bool operator<(const Integer& rhs) const;
	bool operator>(const Integer& rhs) const;
	bool operator<=(const Integer& rhs) const;
	bool operator<=(const Integer& rhs) const;
}
bool operator==(const Integer& rhs) const{
	return i == rhs.i;
}
bool operator!=(const Integer& rhs) const
{
	return !(*this==rhs);
}
bool operator<(const Integer& rhs) const
{
	return i < rhs.i;
}
bool operator>(const Integer& rhs) const
{
	return rhs < *this;
}
bool operator<=(const Integer& rhs) const
{
	return !(rhs < *this);
}
bool operator>=(const Integer& rhs) const
{
	return !(*this < rhs);
}
//改变代码量少，所有函数是inline，性能没损失

[]
表达一种容器的概念
vector.h vector.cpp
class Vector{
public:
	Vector(int size):m_size(size){
		m_array = new int[size];
	}
	~Vector(){delete m_array;}
	int &operator[](int index){
		return m_array[index];
	}
private:
	int m_size;
	int *m_array;
};

三十二，运算符重载--赋值
本课时解释赋值运算符重载时的各种细节。
MyType b;
MyType a = b;//拷贝构造
a = b;//赋值
拷贝构造做了一个新的对象，赋值是将一个新的对象的值赋值给已有的对象。

class fi{
public:
	fi(){};
};
class fee{
public:
	fee(int){}
	fee(const fi&){}
};
int main()
{
	fee fee = 1;//fee(int)
	fi fi;
	fee fum = fi;//fee(fi)
	fum = fi;//赋值，先制造一个新的再赋值
}
没有operator=(type),系统自己给一个，成员赋值,同拷贝构造。
class cargo{
public:
	cargo& operator=(const cargo&){
		cout << "insid cargo::operator=()" << endl;
		return *this;
	}
};
class truck{
	cargo b;
};
int main()
{
	truck a, b;
	a = b;//prints:"inside cargo:...."
}

自己写，必须是成员函数，对自己做赋值，然后返回自己
T &T::operator=(const T& rhs){
	if(this != &rhs){
		//perform assignment;
	}
	return *this;
}

...
class A{
	char *p;
	A& operator=(const A &that){
		delete p;//如果that和shis同，就丢了
		p = new [strlen(that.p)+1];
		strcpy(p,that.p);
		return *this;
	}
}
class cargo{
public:
	cargo& operator=(const cargo&){
		cout << "insid cargo::operator=()" << endl;
		return *this;
	}
};
class truck{
	cargo b;
};
int main()
{
	truck a, b;
	a = b;//prints:"inside cargo:...."
}

=重载，如果有指针动态分配内存，要自己写，没有可以用系统

三十三，运算符重载---类型转换
value class
类的作用是表达值
1，看上去像基本数据类型
2，可以被函数传入传出
3，有需要被重载的运算符
分数的+ -
4，value calss需要和其他类型进行转换
分数+ -
复数 日期 

类型转换
编译器会做一些自动转换
构造函数只有单个参数
类型转换的运算符

class pathname{
	string name;
public:
	pathname(const string &);
	~pathname();
};
string abc("abc");
string abc = "abc";
pathname xyz(abc);//直接做
xyz = abc;// abc == > pathname
//先做一个对象，再赋值

class one{
public:
	one(){}
}；
class two{
public:
	two(const one &){}
};

void f(two){}
int main()
{
	one one;
	f(one);//wants a two, has a one
	//先用two的构造函数制造
}

不想让编译器调用这些构造函数自动转换
explicit two(const one &){}
这个函数只能做构造函数，不能做自动类型转换
f(two(one));


可以做专用的类型转换函数
函数自动被调用，返回类型同函数名字
,没有返回类型，名字就说明了他返回类型
operator A::double()const{
	return numberator_/(double)denominator;
}
A r(1,3);
double d = 1.3*r;//r-->double
/。。。。
X::operator T();
X对象转换为T
没有参数，可以有const，没有返回对象

任意类型：
T->T& //赋值   初始化
T&->T //赋值
T*=>void *//
T[]->T *//
T*->T[]
T->const T

初始化是绑定，赋值是赋值
T->C
if C(T)是一个C类的构造函数
if C()是一个T类的转换函数

如果都有呢
class orange;
class apple{
	public:
	operator orange()const;
	//convert apple to orange
};
class orange{
	public:
	orange(apple);
	//可以加 explicit
	//convert apple to orange
};
void f(orange){}
int main()
{
	apple a;
	f(a);//error 无法选择那一个
}

一般尽量别用，自动做到东西，没有意识就帮你做了，尽量少用自动帮你做的

double toDouble()const;

三十四，模板I
模板是一种代码实现方式。通过声明函数模板或类模板，在需要的时候编译器会为你产生所需的特定类型的函数或模板。本课时解释模板的基础知识。

类型成为模板的参数
函数模板，类模板
用模板做出来的函数，做出来的模板
模板函数，模板类

template <class T>
void swap(T &x, T &y)
{
	T temp = x;
	x = y;
	y = temp;
}

T函数参数类型，函数返回类型，函数里面定义
模板不是函数，模板是声明
看到template什么也不干，当遇到调用，就种一个swap。告诉编译怎么做出函数

swap(int ,int);//ok
swap(double, double);//ok
swap(int, double);//error
希望只有一种类型，不类型转换，用模板就不做类型转换，模板就不认可

重载原则：
1，唯一匹配
2，唯一模板匹配
3，函数重载

template < class T >
void foo(void){...}
foo<int>();
foo<float>();




template <class T>
class vector{
public:
	vector(int);
	~vector();
	vector(const vector &);
	vector &operator=(const vector &);
	T &operator[](int);
private:
	T *m_elements;
	int m_size;
};
vector<int> v1(100);
vector<complex> v2(256);
v1[20] = 10;
v2[20] = v1[20];//ok if int->complex //defined
类模板的每一个成员函数都是函数模板
template <class T>
vector<T>::vector(int size):m_size(size){
	m_elements = new T[m_size];
}































